// instrument by jscoverage, do not modifly this file
(function () {
  var BASE;
  if (typeof global === 'object') {
    BASE = global;
  } else if (typeof window === 'object') {
    BASE = window;
  } else {
    throw new Error('[jscoverage] unknow ENV!');
  }
  if (!BASE._$jscoverage) {
    BASE._$jscoverage = {};
    BASE._$jscoverage_cond = {};
    BASE._$jscoverage_done = function (file, line, express) {
      if (arguments.length === 2) {
        BASE._$jscoverage[file][line] ++;
      } else {
        BASE._$jscoverage_cond[file][line] ++;
        return express;
      }
    };
    BASE._$jscoverage_init = function (base, file, lines) {
      var tmp = [];
      for (var i = 0; i < lines.length; i ++) {
        tmp[lines[i]] = 0;
      }
      base[file] = tmp;
    };
  }
})();
_$jscoverage_init(_$jscoverage, "/home/jed/work/git/striker/test/../dist/striker.js",[2,5,7,9,11,12,14,17,19,21,22,23,26,28,30,32,34,36,39,40,41,42,43,44,45,46,47,49,51,54,55,56,59,60,63,64,65,66,68,69,71,72,74,75,76,77,78,79,80,81,83,84,89,92,93,94,95,97,98,100,101,102,103,104,105,106,108,111,114,115,116,117,118,119,120,122,123,125,128,129,130,131,132,133,134,135,137,138,141,142,143,144,147,148,149,150,152,153,155,156,158,159,160,161,162,163,164,165,167,170,173,174,175,176,177,178,179,180,181,182,183,184,185,187,189,192,193,197,198,199,200,201,202,203,205,208,209,210,211,212,213,214,215,217,221]);
_$jscoverage_init(_$jscoverage_cond, "/home/jed/work/git/striker/test/../dist/striker.js",[11,65,68,71,74,79,80,94,97,105,122,149,152,155,162,162,164,164,181]);
_$jscoverage["/home/jed/work/git/striker/test/../dist/striker.js"].source = ["// Generated by CoffeeScript 1.4.0","var Striker, previousStriker, root,","  __slice = [].slice;","","root = this;","","previousStriker = root.Striker;","","Striker = void 0;","","if (typeof exports !== \"undefined\") {","  Striker = exports;","} else {","  Striker = root.Striker = {};","}","","Striker.VERSION = \"0.0.1\";","","Striker.$ = root.jQuery || root.Zepto || root.ender;","","Striker.noConflict = function() {","  root.Striker = previousStriker;","  return this;","};","","Striker.Collection = (function() {","","  _.extend(Collection.prototype, Backbone.Events);","","  Collection.prototype.multiplier = 1;","","  Collection.prototype.timeSeriesIdentifier = 'monthId';","","  Collection.prototype.schema = [];","","  Collection.prototype.triggers = {};","","  function Collection(inputs) {","    var field;","    this.inputs = inputs != null ? inputs : [];","    this.collections = (function() {","      var _i, _len, _ref, _results;","      _ref = this.schema;","      _results = [];","      for (_i = 0, _len = _ref.length; _i < _len; _i++) {","        field = _ref[_i];","        _results.push(app.schemaMap(field));","      }","      return _results;","    }).call(this);","    this.values = this._initValues();","  }","","  Collection.prototype.calculate = function() {","    var args;","    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];","  };","","  Collection.prototype.isTimeSeries = function() {","    return _.has(_.last(this.schema), this.timeSeriesIdentifier);","  };","","  Collection.prototype._initValues = function(values, inputs, level) {","    var item, order, value, _i, _len, _ref, _ref1;","    if (values == null) {","      values = {};","    }","    if (inputs == null) {","      inputs = this.inputs;","    }","    if (level == null) {","      level = 0;","    }","    if (this.collections[level]) {","      _ref = this.collections[level];","      for (order = _i = 0, _len = _ref.length; _i < _len; order = ++_i) {","        item = _ref[order];","        value = (_ref1 = inputs[order]) != null ? _ref1 : 0;","        if (this.schema) {","          if (level === this.schema.length - 1) {","            values[item.id] = value;","          } else {","            values[item.id] = {};","            this._initValues(values[item.id], value, level + 1);","          }","        }","      }","    }","    return values;","  };","","  Collection.prototype._build = function(level, args) {","    var item, _i, _len, _ref, _results;","    if (level == null) {","      level = 0;","    }","    if (args == null) {","      args = [];","    }","    _ref = this.collections[level];","    _results = [];","    for (_i = 0, _len = _ref.length; _i < _len; _i++) {","      item = _ref[_i];","      args[level] = item.id;","      if (level >= this.schema.length - 1) {","        _results.push(this.update.apply(this, args));","      } else {","        _results.push(this._build(level + 1, args));","      }","    }","    return _results;","  };","","  Collection.prototype.get = function() {","    var args, key, result, _i, _len;","    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];","    result = this.values;","    for (_i = 0, _len = args.length; _i < _len; _i++) {","      key = args[_i];","      result = result[key];","    }","    if (_.isNumber(result)) {","      result = result / this.multiplier;","    }","    return result;","  };","","  Collection.prototype.set = function() {","    var args, key, result, value, _i, _len, _ref;","    value = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];","    result = this.values;","    _ref = args.slice(0, -1);","    for (_i = 0, _len = _ref.length; _i < _len; _i++) {","      key = _ref[_i];","      result = result[key];","    }","    result[_.last(args)] = value;","    return this.trigger('change', args, value, this);","  };","","  Collection.prototype.update = function() {","    var args;","    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];","    return this.set.apply(this, [this.calculate.apply(this, args)].concat(__slice.call(args)));","  };","","  Collection.prototype.print = function(result, args, level) {","    var item, _i, _len, _ref;","    if (result == null) {","      result = [];","    }","    if (args == null) {","      args = [];","    }","    if (level == null) {","      level = 0;","    }","    _ref = this.collections[level];","    for (_i = 0, _len = _ref.length; _i < _len; _i++) {","      item = _ref[_i];","      args[level] = item.id;","      if (level >= this.schema.length - 2 && this.isTimeSeries()) {","        result.push(args.concat(_.values(this.get.apply(this, args))));","      } else if (level >= this.schema.length - 1 && !this.isTimeSeries()) {","        result.push(args.concat(this.get.apply(this, args) * this.multiplier));","      } else {","        this.print(result, args, level + 1);","      }","    }","    return result;","  };","","  Collection.prototype.toArray = function() {","    var _this = this;","    return _.map(this.print(), function(item) {","      var i, index, index2, key, result, _i, _j, _len, _len1, _ref, _ref1;","      result = {};","      _ref = _this.schema;","      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {","        key = _ref[index];","        if (key === 'monthId') {","          _ref1 = _.range(index, _this.print()[0].length);","          for (index2 = _j = 0, _len1 = _ref1.length; _j < _len1; index2 = ++_j) {","            i = _ref1[index2];","            result[index2] = item[i];","          }","          return result;","        } else {","          result[key] = item[index];","        }","      }","      result['value'] = item[_this.schema.length];","      return result;","    });","  };","","  Collection.prototype.enableTriggers = function() {","    var callback, collection, collectionName, _ref;","    _ref = this.triggers;","    for (collectionName in _ref) {","      callback = _ref[collectionName];","      collection = collectionName === 'this' ? this : app[collectionName];","      collection.on('change', this._wrapCallback(callback), this);","    }","    return this._build();","  };","","  Collection.prototype._wrapCallback = function(defaultCallback) {","    return function(args, value, collection) {","      var attributes, key, order, _i, _len, _ref;","      attributes = {};","      _ref = collection.schema;","      for (order = _i = 0, _len = _ref.length; _i < _len; order = ++_i) {","        key = _ref[order];","        attributes[key] = args[order];","      }","      return defaultCallback.call(this, attributes);","    };","  };","","  return Collection;","","})();",""];
_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 2);
var Striker, previousStriker, root, __slice = [].slice;

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 5);
root = this;

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 7);
previousStriker = root.Striker;

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 9);
Striker = void 0;

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 11);
if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 11, typeof exports !== "undefined")) {
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 12);
    Striker = exports;
} else {
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 14);
    Striker = root.Striker = {};
}

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 17);
Striker.VERSION = "0.0.1";

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 19);
Striker.$ = root.jQuery || root.Zepto || root.ender;

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 21);
Striker.noConflict = function() {
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 22);
    root.Striker = previousStriker;
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 23);
    return this;
};

_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 26);
Striker.Collection = function() {
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 28);
    _.extend(Collection.prototype, Backbone.Events);
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 30);
    Collection.prototype.multiplier = 1;
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 32);
    Collection.prototype.timeSeriesIdentifier = "monthId";
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 34);
    Collection.prototype.schema = [];
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 36);
    Collection.prototype.triggers = {};
    function Collection(inputs) {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 39);
        var field;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 40);
        this.inputs = inputs != null ? inputs : [];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 41);
        this.collections = function() {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 42);
            var _i, _len, _ref, _results;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 43);
            _ref = this.schema;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 44);
            _results = [];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 45);
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 46);
                field = _ref[_i];
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 47);
                _results.push(app.schemaMap(field));
            }
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 49);
            return _results;
        }.call(this);
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 51);
        this.values = this._initValues();
    }
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 54);
    Collection.prototype.calculate = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 55);
        var args;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 56);
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 59);
    Collection.prototype.isTimeSeries = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 60);
        return _.has(_.last(this.schema), this.timeSeriesIdentifier);
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 63);
    Collection.prototype._initValues = function(values, inputs, level) {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 64);
        var item, order, value, _i, _len, _ref, _ref1;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 65);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 65, values == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 66);
            values = {};
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 68);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 68, inputs == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 69);
            inputs = this.inputs;
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 71);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 71, level == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 72);
            level = 0;
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 74);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 74, this.collections[level])) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 75);
            _ref = this.collections[level];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 76);
            for (order = _i = 0, _len = _ref.length; _i < _len; order = ++_i) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 77);
                item = _ref[order];
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 78);
                value = (_ref1 = inputs[order]) != null ? _ref1 : 0;
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 79);
                if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 79, this.schema)) {
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 80);
                    if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 80, level === this.schema.length - 1)) {
                        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 81);
                        values[item.id] = value;
                    } else {
                        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 83);
                        values[item.id] = {};
                        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 84);
                        this._initValues(values[item.id], value, level + 1);
                    }
                }
            }
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 89);
        return values;
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 92);
    Collection.prototype._build = function(level, args) {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 93);
        var item, _i, _len, _ref, _results;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 94);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 94, level == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 95);
            level = 0;
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 97);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 97, args == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 98);
            args = [];
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 100);
        _ref = this.collections[level];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 101);
        _results = [];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 102);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 103);
            item = _ref[_i];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 104);
            args[level] = item.id;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 105);
            if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 105, level >= this.schema.length - 1)) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 106);
                _results.push(this.update.apply(this, args));
            } else {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 108);
                _results.push(this._build(level + 1, args));
            }
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 111);
        return _results;
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 114);
    Collection.prototype.get = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 115);
        var args, key, result, _i, _len;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 116);
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 117);
        result = this.values;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 118);
        for (_i = 0, _len = args.length; _i < _len; _i++) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 119);
            key = args[_i];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 120);
            result = result[key];
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 122);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 122, _.isNumber(result))) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 123);
            result = result / this.multiplier;
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 125);
        return result;
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 128);
    Collection.prototype.set = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 129);
        var args, key, result, value, _i, _len, _ref;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 130);
        value = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 131);
        result = this.values;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 132);
        _ref = args.slice(0, -1);
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 133);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 134);
            key = _ref[_i];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 135);
            result = result[key];
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 137);
        result[_.last(args)] = value;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 138);
        return this.trigger("change", args, value, this);
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 141);
    Collection.prototype.update = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 142);
        var args;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 143);
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 144);
        return this.set.apply(this, [ this.calculate.apply(this, args) ].concat(__slice.call(args)));
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 147);
    Collection.prototype.print = function(result, args, level) {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 148);
        var item, _i, _len, _ref;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 149);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 149, result == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 150);
            result = [];
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 152);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 152, args == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 153);
            args = [];
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 155);
        if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 155, level == null)) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 156);
            level = 0;
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 158);
        _ref = this.collections[level];
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 159);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 160);
            item = _ref[_i];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 161);
            args[level] = item.id;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 162);
            if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 162, level >= this.schema.length - 2) && _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 162, this.isTimeSeries())) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 163);
                result.push(args.concat(_.values(this.get.apply(this, args))));
            } else {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 164);
                if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 164, level >= this.schema.length - 1) && _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 164, !this.isTimeSeries())) {
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 165);
                    result.push(args.concat(this.get.apply(this, args) * this.multiplier));
                } else {
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 167);
                    this.print(result, args, level + 1);
                }
            }
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 170);
        return result;
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 173);
    Collection.prototype.toArray = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 174);
        var _this = this;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 175);
        return _.map(this.print(), function(item) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 176);
            var i, index, index2, key, result, _i, _j, _len, _len1, _ref, _ref1;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 177);
            result = {};
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 178);
            _ref = _this.schema;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 179);
            for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 180);
                key = _ref[index];
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 181);
                if (_$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 181, key === "monthId")) {
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 182);
                    _ref1 = _.range(index, _this.print()[0].length);
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 183);
                    for (index2 = _j = 0, _len1 = _ref1.length; _j < _len1; index2 = ++_j) {
                        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 184);
                        i = _ref1[index2];
                        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 185);
                        result[index2] = item[i];
                    }
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 187);
                    return result;
                } else {
                    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 189);
                    result[key] = item[index];
                }
            }
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 192);
            result["value"] = item[_this.schema.length];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 193);
            return result;
        });
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 197);
    Collection.prototype.enableTriggers = function() {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 198);
        var callback, collection, collectionName, _ref;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 199);
        _ref = this.triggers;
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 200);
        for (collectionName in _ref) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 201);
            callback = _ref[collectionName];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 202);
            collection = collectionName === "this" ? this : app[collectionName];
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 203);
            collection.on("change", this._wrapCallback(callback), this);
        }
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 205);
        return this._build();
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 208);
    Collection.prototype._wrapCallback = function(defaultCallback) {
        _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 209);
        return function(args, value, collection) {
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 210);
            var attributes, key, order, _i, _len, _ref;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 211);
            attributes = {};
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 212);
            _ref = collection.schema;
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 213);
            for (order = _i = 0, _len = _ref.length; _i < _len; order = ++_i) {
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 214);
                key = _ref[order];
                _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 215);
                attributes[key] = args[order];
            }
            _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 217);
            return defaultCallback.call(this, attributes);
        };
    };
    _$jscoverage_done("/home/jed/work/git/striker/test/../dist/striker.js", 221);
    return Collection;
}();